var SitemapGenerator = require('sitemap-generator'),
	ampConfig = require('./amp-config.json'),
	fs = require('fs'),
	fse = require('fs-extra'),
	chalk = require('chalk'),
	nodePath = require('path'),
	argv = require('yargs').argv,
	domainProvided = argv.domain,
	output,
	fileName,
	path,
	xml2js = require('xml2js'),
	parser = new xml2js.Parser(),
	moment = require('moment'),
	msToTime = require('./msToTime'),
	startTimer;

	const getDomain = require('./getDomain');
	domain = getDomain(domainProvided);

// create generator
var generator = new SitemapGenerator(argv.domain);

generator.on(
	'fetch',
	function (status, url) {
		if(status === 'OK'){
			console.log('fetching: ',url, ' - status: ',chalk.white.bold.bgGreen(' ',status,' '));
		} else {
			console.log('fetching: ',url, ' - status: ',chalk.white.bold.bgRed(' ',status,' '));
		}
	}
);

// register event listeners
generator.on(
	'done',
	function (sitemap) {

		path = ampConfig.quality.reportsDir + '/' + domain + '/sitemap/';

		fse.ensureDir(
			path,
			/*
			 * PURPOSE : Autogenerates function contract comments
			 *  PARAMS : err -
			 * RETURNS : 			funct -
			 *   NOTES :
			 */
			function (err) {

				fileName = path + '/' + fileName;
				fs.writeFileSync(fileName, sitemap);
				convertXML(fileName);

			}
		)

	}

);

/*
 * PURPOSE : Takes xml sitemap generated by sitemapgenerator and converts it to JSON
 *  PARAMS : fileName - the xml sitemap file
 * RETURNS : function - JSON file replacement
 *   NOTES :
 */
function convertXML(fileName){

	var currPath = nodePath.dirname(fileName);

	fs.readFile(fileName,

		function(err, data) {

			parser.parseString(data,

				function (err, result) {

					var output = JSON.stringify(result);
					var urlArray = [];
					for(loc in result.urlset.url){
						urlArray.push('\'' + result.urlset.url[loc].loc[0] + '\'');
					}
					fs.writeFileSync(currPath + '/' + domain + '.js', 'module.exports = [' + urlArray + ']');
					fs.unlinkSync(fileName);
					console.log(chalk.green.bold('Done writing file'));
					var endTimer = new Date() - startTimer;
					console.log('Execution time: ',chalk.black.bold.bgWhite(msToTime(endTimer)));
				}
			);
		}
	);

}

// function msToTime(duration) {
// 	var milliseconds = parseInt((duration%1000)/100)
// 	, seconds = parseInt((duration/1000)%60)
// 	, minutes = parseInt((duration/(1000*60))%60)
// 	, hours = parseInt((duration/(1000*60*60))%24);
//
// 	hours = (hours < 10) ? "0" + hours : hours;
// 	minutes = (minutes < 10) ? "0" + minutes : minutes;
// 	seconds = (seconds < 10) ? "0" + seconds : seconds;
//
// 	return hours + ":" + minutes + ":" + seconds + "." + milliseconds;
//
// }

const start = function(){

	//set timer
	startTimer = new Date();
	// start the crawler
	generator.start();

}

start();
